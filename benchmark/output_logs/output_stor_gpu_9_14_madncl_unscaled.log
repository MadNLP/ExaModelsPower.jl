[info | PowerModels]: Suppressing information and warning messages for the rest of this session.  Use the Memento package for more fine-grained control of logging.
[ Info: Loading cached JLD2 file
[ Info: Loading cached JLD2 file
[ Info: Loading cached JLD2 file
ERROR: LoadError: MethodError: no method matching parse_option(::Type{Int64}, ::Float64)
Stacktrace:
 [1] set_options!(opt::MadNLPOptions{Float64}, options::Dict{Symbol, Any})
   @ MadNLP ~/.julia/packages/MadNLP/Udkb5/src/options.jl:11
 [2] load_options(nlp::ExaModel{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, ExaModelsKernelAbstractions.KAExtension{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, Nothing, CuArray{Tuple{Int64, Int64}, 1, CUDA.DeviceMemory}, CuArray{Int64, 1, CUDA.DeviceMemory}, CUDABackend}, ExaModels.Objective{ExaModels.ObjectiveNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.ConstraintNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, Int64}}}, Int64}}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 2}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{Tuple{Int64, Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 11}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 12}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 13}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 14}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 9}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Compressor{Tuple{Int64, Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Node1{typeof(abs2), ExaModels.ParIndexed{ExaModels.ParSource, 5}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Node2{typeof(*), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 10}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Compressor{NTuple{4, Int64}}, ExaModels.Compressor{NTuple{5, Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 8}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 6}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Compressor{NTuple{4, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(/), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}}}, ExaModels.Compressor{NTuple{4, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.ParIndexed{ExaModels.ParSource, 2}}, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(/), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}}}, ExaModels.Compressor{Tuple{Int64, Int64, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 1, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}}; options::@Kwargs{tol::Float64, max_wall_time::Float64, disable_garbage_collector::Bool, dual_initialized::Bool, max_iter::Float64})
   @ MadNLP ~/.julia/packages/MadNLP/Udkb5/src/options.jl:178
 [3] load_options
   @ ~/.julia/packages/MadNLP/Udkb5/src/options.jl:172 [inlined]
 [4] MadNLPSolver(nlp::ExaModel{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, ExaModelsKernelAbstractions.KAExtension{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, Nothing, CuArray{Tuple{Int64, Int64}, 1, CUDA.DeviceMemory}, CuArray{Int64, 1, CUDA.DeviceMemory}, CUDABackend}, ExaModels.Objective{ExaModels.ObjectiveNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.ConstraintNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, Int64}}}, Int64}}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 2}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{Tuple{Int64, Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 11}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 12}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 13}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 14}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 9}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Compressor{Tuple{Int64, Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Node1{typeof(abs2), ExaModels.ParIndexed{ExaModels.ParSource, 5}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Node2{typeof(*), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 10}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Compressor{NTuple{4, Int64}}, ExaModels.Compressor{NTuple{5, Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 8}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 6}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Compressor{NTuple{4, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(/), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}}}, ExaModels.Compressor{NTuple{4, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.ParIndexed{ExaModels.ParSource, 2}}, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(/), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}}}, ExaModels.Compressor{Tuple{Int64, Int64, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 1, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}}; kwargs::@Kwargs{tol::Float64, max_wall_time::Float64, disable_garbage_collector::Bool, dual_initialized::Bool, max_iter::Float64})
   @ MadNLP ~/.julia/packages/MadNLP/Udkb5/src/IPM/IPM.jl:117
 [5] MadNLPSolver
   @ ~/.julia/packages/MadNLP/Udkb5/src/IPM/IPM.jl:115 [inlined]
 [6] madnlp(model::ExaModel{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, ExaModelsKernelAbstractions.KAExtension{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, Nothing, CuArray{Tuple{Int64, Int64}, 1, CUDA.DeviceMemory}, CuArray{Int64, 1, CUDA.DeviceMemory}, CUDABackend}, ExaModels.Objective{ExaModels.ObjectiveNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.ConstraintNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, Int64}}}, Int64}}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 2}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{Tuple{Int64, Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 11}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 12}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 13}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 14}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 9}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Compressor{Tuple{Int64, Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Node1{typeof(abs2), ExaModels.ParIndexed{ExaModels.ParSource, 5}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Node2{typeof(*), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 10}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Compressor{NTuple{4, Int64}}, ExaModels.Compressor{NTuple{5, Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 8}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 6}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}}, ExaModels.Compressor{NTuple{4, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(/), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}}}, ExaModels.Compressor{NTuple{4, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.ParIndexed{ExaModels.ParSource, 2}}, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(/), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}}}, ExaModels.Compressor{Tuple{Int64, Int64, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 1, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float64, etac::Float64, etad::Float64, Srating::Float64, Zr::Float64, Zim::Float64, Pexts::Float64, Qexts::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}}; kwargs::@Kwargs{tol::Float64, max_wall_time::Float64, disable_garbage_collector::Bool, dual_initialized::Bool, max_iter::Float64})
   @ MadNLP ~/.julia/packages/MadNLP/Udkb5/src/IPM/solver.jl:10
 [7] solve_benchmark_cases(cases::Vector{String}, tol::Float64, hardware::String; coords::String, case_style::String, curve::Vector{Float64}, mp::Bool, storage::Bool, sc::Bool, corrective_action_ratio::Float64, include_ctg::Bool)
   @ Main ~/ExaModelsPower.jl/benchmarking/benchmark/benchmark_opf.jl:1074
 [8] top-level scope
   @ ~/ExaModelsPower.jl/benchmarking/benchmark/run_stor_gpu.jl:5
in expression starting at /home/sanjayjo/ExaModelsPower.jl/benchmarking/benchmark/run_stor_gpu.jl:4
Found existing results at saved_raw_data/benchmark_results_mpopf_stor_GPU_default_tol_1e4_Polar.csv
This is MadNLP version v0.8.10, running with cuDSS v0.6.0

Number of nonzeros in constraint Jacobian............:     3243
Number of nonzeros in Lagrangian Hessian.............:     3725

Total number of variables............................:      775
                     variables with only lower bounds:       25
                variables with lower and upper bounds:      625
                     variables with only upper bounds:        0
Total number of equality constraints.................:      599
Total number of inequality constraints...............:      323
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:      148
        inequality constraints with only upper bounds:      175

iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5822799e+02 1.09e+00 1.00e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  2.0752552e+02 1.09e+00 1.00e+02 8.05e+03  -1.0 1.75e+00    -  5.97e-03 2.59e-03h  1
   2  3.7037110e+02 1.08e+00 9.94e+01 7.95e+03  -1.0 1.89e+00    -  1.22e-02 8.35e-03h  1
   3  1.2371822e+03 1.04e+00 9.57e+01 7.68e+03  -1.0 1.81e+00    -  3.41e-02 3.76e-02h  1

Number of Iterations....: 3

                                   (scaled)                 (unscaled)
Objective...............:   2.3710801984214422e+02    1.2371822259323401e+03
Dual infeasibility......:   9.5651096876456805e+01    4.9908829328197629e+02
Constraint violation....:   1.0375110159259764e+00    1.0375110159259764e+00
Complementarity.........:   1.4723410915751931e+03    7.6823813476210426e+03
Overall NLP error.......:   7.6823813476210426e+03    7.6823813476210426e+03

Number of objective function evaluations             = 4
Number of objective gradient evaluations             = 4
Number of constraint evaluations                     = 4
Number of constraint Jacobian evaluations            = 4
Number of Lagrangian Hessian evaluations             = 3
Total wall-clock secs in solver (w/o fun. eval./lin. alg.)  = 94.846
Total wall-clock secs in linear solver                      =  2.591
Total wall-clock secs in NLP function evaluations           =  5.384
Total wall-clock secs                                       = 102.821

EXIT: Maximum Number of Iterations Exceeded.
MadNCL algorithm

Total number of variables............................:      775
Total number of constraints..........................:      922

outer  inner     objective    inf_pr   inf_du    η        μ       ρ 
    0      0 +1.5822799e+02 0.00e+00 0.00e+00 1.00e-01 1.0e-01 1.00e+02
iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5822799e+02 1.09e+00 5.22e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  1.4665835e+02 1.09e+00 5.18e+02 7.50e+03  -1.0 4.37e-01    -  7.36e-02 4.00e-03h  1
   2  2.6746783e+01 1.03e+00 4.89e+02 6.74e+03  -1.0 7.13e-01    -  1.02e-01 4.72e-02h  1
   3  2.8196105e+01 9.46e-01 4.27e+02 5.86e+03  -1.0 4.55e-01   0.0 1.30e-01 8.55e-02h  1
This is MadNLP version v0.8.10, running with cuDSS v0.6.0

Number of nonzeros in constraint Jacobian............:     3243
Number of nonzeros in Lagrangian Hessian.............:     3725

Total number of variables............................:      750
                     variables with only lower bounds:       25
                variables with lower and upper bounds:      600
                     variables with only upper bounds:        0
Total number of equality constraints.................:      599
Total number of inequality constraints...............:      323
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:      148
        inequality constraints with only upper bounds:      175

iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5987484e+02 1.09e+00 1.00e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  2.3606456e+02 1.09e+00 9.98e+01 8.05e+03  -1.0 1.77e+00    -  5.90e-03 4.03e-03h  1
   2  9.6387831e+02 1.05e+00 9.62e+01 7.95e+03  -1.0 1.87e+00    -  1.28e-02 3.34e-02h  1
   3  1.6765378e+03 1.02e+00 9.35e+01 7.44e+03  -1.0 1.78e+00    -  6.43e-02 2.74e-02h  1

Number of Iterations....: 3

                                   (scaled)                 (unscaled)
Objective...............:   3.2117583613336615e+02    1.6765377939574873e+03
Dual infeasibility......:   9.3493508397278873e+01    4.8803609326522388e+02
Constraint violation....:   1.0205663842942787e+00    1.0205663842942787e+00
Complementarity.........:   1.4249079275138843e+03    7.4380190681427321e+03
Overall NLP error.......:   7.4380190681427321e+03    7.4380190681427321e+03

Number of objective function evaluations             = 4
Number of objective gradient evaluations             = 4
Number of constraint evaluations                     = 4
Number of constraint Jacobian evaluations            = 4
Number of Lagrangian Hessian evaluations             = 3
Total wall-clock secs in solver (w/o fun. eval./lin. alg.)  = 20.960
Total wall-clock secs in linear solver                      =  0.942
Total wall-clock secs in NLP function evaluations           =  0.258
Total wall-clock secs                                       = 22.160

EXIT: Maximum Number of Iterations Exceeded.
Already have 66 cases stored.
pglib_opf_case3_lmbd
Skipping pglib_opf_case3_lmbd_storage (already in results)
pglib_opf_case5_pjm
Skipping pglib_opf_case5_pjm_storage (already in results)
pglib_opf_case14_ieee
Skipping pglib_opf_case14_ieee_storage (already in results)
pglib_opf_case24_ieee_rts
Skipping pglib_opf_case24_ieee_rts_storage (already in results)
pglib_opf_case30_as
Skipping pglib_opf_case30_as_storage (already in results)
pglib_opf_case30_ieee
Skipping pglib_opf_case30_ieee_storage (already in results)
pglib_opf_case39_epri
Skipping pglib_opf_case39_epri_storage (already in results)
pglib_opf_case57_ieee
Skipping pglib_opf_case57_ieee_storage (already in results)
pglib_opf_case60_c
Skipping pglib_opf_case60_c_storage (already in results)
pglib_opf_case73_ieee_rts
Skipping pglib_opf_case73_ieee_rts_storage (already in results)
pglib_opf_case89_pegase
Skipping pglib_opf_case89_pegase_storage (already in results)
pglib_opf_case118_ieee
Skipping pglib_opf_case118_ieee_storage (already in results)
pglib_opf_case162_ieee_dtc
Skipping pglib_opf_case162_ieee_dtc_storage (already in results)
pglib_opf_case179_goc
Skipping pglib_opf_case179_goc_storage (already in results)
pglib_opf_case197_snem
Skipping pglib_opf_case197_snem_storage (already in results)
pglib_opf_case200_activ
Skipping pglib_opf_case200_activ_storage (already in results)
pglib_opf_case240_pserc
Skipping pglib_opf_case240_pserc_storage (already in results)
pglib_opf_case300_ieee
Skipping pglib_opf_case300_ieee_storage (already in results)
pglib_opf_case500_goc
Skipping pglib_opf_case500_goc_storage (already in results)
pglib_opf_case588_sdet
Skipping pglib_opf_case588_sdet_storage (already in results)
pglib_opf_case793_goc
Skipping pglib_opf_case793_goc_storage (already in results)
pglib_opf_case1354_pegase
Skipping pglib_opf_case1354_pegase_storage (already in results)
pglib_opf_case1803_snem
Skipping pglib_opf_case1803_snem_storage (already in results)
pglib_opf_case1888_rte
Skipping pglib_opf_case1888_rte_storage (already in results)
pglib_opf_case1951_rte
Skipping pglib_opf_case1951_rte_storage (already in results)
pglib_opf_case2000_goc
Skipping pglib_opf_case2000_goc_storage (already in results)
pglib_opf_case2312_goc
Skipping pglib_opf_case2312_goc_storage (already in results)
pglib_opf_case2383wp_k
Skipping pglib_opf_case2383wp_k_storage (already in results)
pglib_opf_case2736sp_k
Skipping pglib_opf_case2736sp_k_storage (already in results)
pglib_opf_case2737sop_k
Skipping pglib_opf_case2737sop_k_storage (already in results)
pglib_opf_case2742_goc
Skipping pglib_opf_case2742_goc_storage (already in results)
pglib_opf_case2746wop_k
Skipping pglib_opf_case2746wop_k_storage (already in results)
pglib_opf_case2746wp_k
Skipping pglib_opf_case2746wp_k_storage (already in results)
pglib_opf_case2848_rte
Skipping pglib_opf_case2848_rte_storage (already in results)
pglib_opf_case2853_sdet
Skipping pglib_opf_case2853_sdet_storage (already in results)
pglib_opf_case2868_rte
Skipping pglib_opf_case2868_rte_storage (already in results)
pglib_opf_case2869_pegase
Skipping pglib_opf_case2869_pegase_storage (already in results)
pglib_opf_case3012wp_k
Skipping pglib_opf_case3012wp_k_storage (already in results)
pglib_opf_case3022_goc
Skipping pglib_opf_case3022_goc_storage (already in results)
pglib_opf_case3120sp_k
Skipping pglib_opf_case3120sp_k_storage (already in results)
pglib_opf_case3375wp_k
Skipping pglib_opf_case3375wp_k_storage (already in results)
pglib_opf_case3970_goc
Skipping pglib_opf_case3970_goc_storage (already in results)
pglib_opf_case4020_goc
Skipping pglib_opf_case4020_goc_storage (already in results)
pglib_opf_case4601_goc
Skipping pglib_opf_case4601_goc_storage (already in results)
pglib_opf_case4619_goc
Skipping pglib_opf_case4619_goc_storage (already in results)
pglib_opf_case4661_sdet
Skipping pglib_opf_case4661_sdet_storage (already in results)
pglib_opf_case4837_goc
Skipping pglib_opf_case4837_goc_storage (already in results)
pglib_opf_case4917_goc
Skipping pglib_opf_case4917_goc_storage (already in results)
pglib_opf_case5658_epigrids
Skipping pglib_opf_case5658_epigrids_storage (already in results)
pglib_opf_case6468_rte
Skipping pglib_opf_case6468_rte_storage (already in results)
pglib_opf_case6470_rte
Skipping pglib_opf_case6470_rte_storage (already in results)
pglib_opf_case6495_rte
Skipping pglib_opf_case6495_rte_storage (already in results)
pglib_opf_case6515_rte
Skipping pglib_opf_case6515_rte_storage (already in results)
pglib_opf_case7336_epigrids
Skipping pglib_opf_case7336_epigrids_storage (already in results)
pglib_opf_case8387_pegase
Skipping pglib_opf_case8387_pegase_storage (already in results)
pglib_opf_case9241_pegase
Skipping pglib_opf_case9241_pegase_storage (already in results)
pglib_opf_case9591_goc
Skipping pglib_opf_case9591_goc_storage (already in results)
pglib_opf_case10000_goc
Skipping pglib_opf_case10000_goc_storage (already in results)
pglib_opf_case10192_epigrids
Skipping pglib_opf_case10192_epigrids_storage (already in results)
pglib_opf_case10480_goc
Skipping pglib_opf_case10480_goc_storage (already in results)
pglib_opf_case13659_pegase
Skipping pglib_opf_case13659_pegase_storage (already in results)
pglib_opf_case19402_goc
Skipping pglib_opf_case19402_goc_storage (already in results)
pglib_opf_case20758_epigrids
Skipping pglib_opf_case20758_epigrids_storage (already in results)
pglib_opf_case24464_goc
Skipping pglib_opf_case24464_goc_storage (already in results)
pglib_opf_case30000_goc
Skipping pglib_opf_case30000_goc_storage (already in results)
pglib_opf_case78484_epigrids
Skipping pglib_opf_case78484_epigrids_storage (already in results)
Found existing results at saved_raw_data/benchmark_results_mpopf_stor_GPU_default_tol_1e8_Polar.csv
This is MadNLP version v0.8.10, running with cuDSS v0.6.0

Number of nonzeros in constraint Jacobian............:     3243
Number of nonzeros in Lagrangian Hessian.............:     3725

Total number of variables............................:      775
                     variables with only lower bounds:       25
                variables with lower and upper bounds:      625
                     variables with only upper bounds:        0
Total number of equality constraints.................:      599
Total number of inequality constraints...............:      323
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:      148
        inequality constraints with only upper bounds:      175

iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5987484e+02 1.09e+00 1.00e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  1.5987925e+02 1.09e+00 1.17e+00 7.13e+01  -1.0 2.02e+00    -  5.12e-03 2.00e-07h  2
   2  3.2207627e+02 1.08e+00 4.16e-01 2.54e+01  -1.0 1.88e+00    -  9.21e-03 8.58e-03h  1
   3  1.1512445e+03 1.04e+00 1.31e-01 8.00e+00  -1.0 1.82e+00    -  3.01e-02 3.64e-02h  1

Number of Iterations....: 3

                                   (scaled)                 (unscaled)
Objective...............:   2.2054492381950007e+02    1.1512444538179072e+03
Dual infeasibility......:   1.3054646572765452e-01    6.8145252237813414e-01
Constraint violation....:   1.0412994145912180e+00    1.0412994145912180e+00
Complementarity.........:   1.5323218571521042e+00    7.9987197572231761e+00
Overall NLP error.......:   7.9987197572231761e+00    7.9987197572231761e+00

Number of objective function evaluations             = 5
Number of objective gradient evaluations             = 4
Number of constraint evaluations                     = 5
Number of constraint Jacobian evaluations            = 4
Number of Lagrangian Hessian evaluations             = 3
Total wall-clock secs in solver (w/o fun. eval./lin. alg.)  =  0.043
Total wall-clock secs in linear solver                      =  0.006
Total wall-clock secs in NLP function evaluations           =  0.007
Total wall-clock secs                                       =  0.056

EXIT: Maximum Number of Iterations Exceeded.
MadNCL algorithm

Total number of variables............................:      775
Total number of constraints..........................:      922

outer  inner     objective    inf_pr   inf_du    η        μ       ρ 
    0      0 +1.5987484e+02 0.00e+00 0.00e+00 1.00e-01 1.0e-01 1.00e+02
iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5987484e+02 1.09e+00 5.22e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  1.5987425e+02 1.09e+00 4.24e-01 4.67e+00  -1.0 4.37e-01    -  7.29e-02 2.00e-07h  2
    1      1 +1.5987425e+02 7.52e-08 5.20e+02 1.02e-03 1.0e-02 1.00e+02
   1  1.5987425e+02 1.09e+00 4.24e-01 4.67e+00  -2.0 5.47e-01    -  7.29e-02 2.00e-07h  2
   2  2.7847782e+01 1.04e+00 4.00e-01 4.49e+00  -2.0 5.67e-01    -  2.76e-02 4.98e-02h  1
   3  2.4064630e+01 1.02e+00 3.59e-01 3.98e+00  -2.0 4.81e-01    -  8.55e-02 1.23e-02h  1
This is MadNLP version v0.8.10, running with cuDSS v0.6.0

Number of nonzeros in constraint Jacobian............:     3243
Number of nonzeros in Lagrangian Hessian.............:     3725

Total number of variables............................:      750
                     variables with only lower bounds:       25
                variables with lower and upper bounds:      600
                     variables with only upper bounds:        0
Total number of equality constraints.................:      599
Total number of inequality constraints...............:      323
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:      148
        inequality constraints with only upper bounds:      175

iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5987484e+02 1.09e+00 1.00e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  2.3606456e+02 1.09e+00 9.98e+01 8.05e+03  -1.0 1.77e+00    -  5.90e-03 4.03e-03h  1
   2  9.6387831e+02 1.05e+00 9.62e+01 7.95e+03  -1.0 1.87e+00    -  1.28e-02 3.34e-02h  1
   3  1.6765378e+03 1.02e+00 9.35e+01 7.44e+03  -1.0 1.78e+00    -  6.43e-02 2.74e-02h  1

Number of Iterations....: 3

                                   (scaled)                 (unscaled)
Objective...............:   3.2117583613336620e+02    1.6765377939574878e+03
Dual infeasibility......:   9.3493508397278873e+01    4.8803609326522388e+02
Constraint violation....:   1.0205663842942789e+00    1.0205663842942789e+00
Complementarity.........:   1.4249079275138849e+03    7.4380190681427357e+03
Overall NLP error.......:   7.4380190681427357e+03    7.4380190681427357e+03

Number of objective function evaluations             = 4
Number of objective gradient evaluations             = 4
Number of constraint evaluations                     = 4
Number of constraint Jacobian evaluations            = 4
Number of Lagrangian Hessian evaluations             = 3
Total wall-clock secs in solver (w/o fun. eval./lin. alg.)  =  0.042
Total wall-clock secs in linear solver                      =  0.017
Total wall-clock secs in NLP function evaluations           =  0.008
Total wall-clock secs                                       =  0.067

EXIT: Maximum Number of Iterations Exceeded.
Already have 50 cases stored.
pglib_opf_case3_lmbd
Skipping pglib_opf_case3_lmbd_storage (already in results)
pglib_opf_case5_pjm
Skipping pglib_opf_case5_pjm_storage (already in results)
pglib_opf_case14_ieee
Skipping pglib_opf_case14_ieee_storage (already in results)
pglib_opf_case24_ieee_rts
Skipping pglib_opf_case24_ieee_rts_storage (already in results)
pglib_opf_case30_as
Skipping pglib_opf_case30_as_storage (already in results)
pglib_opf_case30_ieee
Skipping pglib_opf_case30_ieee_storage (already in results)
pglib_opf_case39_epri
Skipping pglib_opf_case39_epri_storage (already in results)
pglib_opf_case57_ieee
Skipping pglib_opf_case57_ieee_storage (already in results)
pglib_opf_case60_c
Skipping pglib_opf_case60_c_storage (already in results)
pglib_opf_case73_ieee_rts
Skipping pglib_opf_case73_ieee_rts_storage (already in results)
pglib_opf_case89_pegase
Skipping pglib_opf_case89_pegase_storage (already in results)
pglib_opf_case118_ieee
Skipping pglib_opf_case118_ieee_storage (already in results)
pglib_opf_case162_ieee_dtc
Skipping pglib_opf_case162_ieee_dtc_storage (already in results)
pglib_opf_case179_goc
Skipping pglib_opf_case179_goc_storage (already in results)
pglib_opf_case197_snem
Skipping pglib_opf_case197_snem_storage (already in results)
pglib_opf_case200_activ
Skipping pglib_opf_case200_activ_storage (already in results)
pglib_opf_case240_pserc
Skipping pglib_opf_case240_pserc_storage (already in results)
pglib_opf_case300_ieee
Skipping pglib_opf_case300_ieee_storage (already in results)
pglib_opf_case500_goc
Skipping pglib_opf_case500_goc_storage (already in results)
pglib_opf_case588_sdet
Skipping pglib_opf_case588_sdet_storage (already in results)
pglib_opf_case793_goc
Skipping pglib_opf_case793_goc_storage (already in results)
pglib_opf_case1354_pegase
Skipping pglib_opf_case1354_pegase_storage (already in results)
pglib_opf_case1803_snem
Skipping pglib_opf_case1803_snem_storage (already in results)
pglib_opf_case1888_rte
Skipping pglib_opf_case1888_rte_storage (already in results)
pglib_opf_case1951_rte
Skipping pglib_opf_case1951_rte_storage (already in results)
pglib_opf_case2000_goc
Skipping pglib_opf_case2000_goc_storage (already in results)
pglib_opf_case2312_goc
Skipping pglib_opf_case2312_goc_storage (already in results)
pglib_opf_case2383wp_k
Skipping pglib_opf_case2383wp_k_storage (already in results)
pglib_opf_case2736sp_k
Skipping pglib_opf_case2736sp_k_storage (already in results)
pglib_opf_case2737sop_k
Skipping pglib_opf_case2737sop_k_storage (already in results)
pglib_opf_case2742_goc
Skipping pglib_opf_case2742_goc_storage (already in results)
pglib_opf_case2746wop_k
Skipping pglib_opf_case2746wop_k_storage (already in results)
pglib_opf_case2746wp_k
Skipping pglib_opf_case2746wp_k_storage (already in results)
pglib_opf_case2848_rte
Skipping pglib_opf_case2848_rte_storage (already in results)
pglib_opf_case2853_sdet
Skipping pglib_opf_case2853_sdet_storage (already in results)
pglib_opf_case2868_rte
Skipping pglib_opf_case2868_rte_storage (already in results)
pglib_opf_case2869_pegase
Skipping pglib_opf_case2869_pegase_storage (already in results)
pglib_opf_case3012wp_k
Skipping pglib_opf_case3012wp_k_storage (already in results)
pglib_opf_case3022_goc
Skipping pglib_opf_case3022_goc_storage (already in results)
pglib_opf_case3120sp_k
Skipping pglib_opf_case3120sp_k_storage (already in results)
pglib_opf_case3375wp_k
Skipping pglib_opf_case3375wp_k_storage (already in results)
pglib_opf_case3970_goc
Skipping pglib_opf_case3970_goc_storage (already in results)
pglib_opf_case4020_goc
Skipping pglib_opf_case4020_goc_storage (already in results)
pglib_opf_case4601_goc
Skipping pglib_opf_case4601_goc_storage (already in results)
pglib_opf_case4619_goc
Skipping pglib_opf_case4619_goc_storage (already in results)
pglib_opf_case4661_sdet
Skipping pglib_opf_case4661_sdet_storage (already in results)
pglib_opf_case4837_goc
Skipping pglib_opf_case4837_goc_storage (already in results)
pglib_opf_case4917_goc
Skipping pglib_opf_case4917_goc_storage (already in results)
pglib_opf_case5658_epigrids
Skipping pglib_opf_case5658_epigrids_storage (already in results)
pglib_opf_case6468_rte
Skipping pglib_opf_case6468_rte_storage (already in results)
pglib_opf_case6470_rte
