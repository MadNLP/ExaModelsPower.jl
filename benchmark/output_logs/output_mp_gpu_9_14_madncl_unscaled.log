[info | PowerModels]: Suppressing information and warning messages for the rest of this session.  Use the Memento package for more fine-grained control of logging.
[ Info: Loading cached JLD2 file
[ Info: Loading cached JLD2 file
[ Info: Loading cached JLD2 file
ERROR: LoadError: MethodError: no method matching parse_option(::Type{Int64}, ::Float64)
Stacktrace:
 [1] set_options!(opt::MadNLPOptions{Float64}, options::Dict{Symbol, Any})
   @ MadNLP ~/.julia/packages/MadNLP/Udkb5/src/options.jl:11
 [2] load_options(nlp::ExaModel{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, ExaModelsKernelAbstractions.KAExtension{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, Nothing, CuArray{Tuple{Int64, Int64}, 1, CUDA.DeviceMemory}, CuArray{Int64, 1, CUDA.DeviceMemory}, CUDABackend}, ExaModels.Objective{ExaModels.ObjectiveNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.ConstraintNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, Int64}}}, Int64}}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 2}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{Tuple{Int64, Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 11}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 12}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 13}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 14}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float32, etac::Float32, etad::Float32, Srating::Float32, Zr::Float32, Zim::Float32, Pexts::Float32, Qexts::Float32, bus::Int64, t::Int64}, 1, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float32, etac::Float32, etad::Float32, Srating::Float32, Zr::Float32, Zim::Float32, Pexts::Float32, Qexts::Float32, bus::Int64, t::Int64}, 1, CUDA.DeviceMemory}}}; options::@Kwargs{tol::Float64, max_wall_time::Float64, disable_garbage_collector::Bool, dual_initialized::Bool, max_iter::Float64})
   @ MadNLP ~/.julia/packages/MadNLP/Udkb5/src/options.jl:178
 [3] load_options
   @ ~/.julia/packages/MadNLP/Udkb5/src/options.jl:172 [inlined]
 [4] MadNLPSolver(nlp::ExaModel{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, ExaModelsKernelAbstractions.KAExtension{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, Nothing, CuArray{Tuple{Int64, Int64}, 1, CUDA.DeviceMemory}, CuArray{Int64, 1, CUDA.DeviceMemory}, CUDABackend}, ExaModels.Objective{ExaModels.ObjectiveNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.ConstraintNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, Int64}}}, Int64}}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 2}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{Tuple{Int64, Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 11}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 12}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 13}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 14}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float32, etac::Float32, etad::Float32, Srating::Float32, Zr::Float32, Zim::Float32, Pexts::Float32, Qexts::Float32, bus::Int64, t::Int64}, 1, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float32, etac::Float32, etad::Float32, Srating::Float32, Zr::Float32, Zim::Float32, Pexts::Float32, Qexts::Float32, bus::Int64, t::Int64}, 1, CUDA.DeviceMemory}}}; kwargs::@Kwargs{tol::Float64, max_wall_time::Float64, disable_garbage_collector::Bool, dual_initialized::Bool, max_iter::Float64})
   @ MadNLP ~/.julia/packages/MadNLP/Udkb5/src/IPM/IPM.jl:117
 [5] MadNLPSolver
   @ ~/.julia/packages/MadNLP/Udkb5/src/IPM/IPM.jl:115 [inlined]
 [6] madnlp(model::ExaModel{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, ExaModelsKernelAbstractions.KAExtension{Float64, CuArray{Float64, 1, CUDA.DeviceMemory}, Nothing, CuArray{Tuple{Int64, Int64}, 1, CUDA.DeviceMemory}, CuArray{Int64, 1, CUDA.DeviceMemory}, CUDABackend}, ExaModels.Objective{ExaModels.ObjectiveNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 4}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.ConstraintAug{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.Constraint{ExaModels.ConstraintNull, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}, ExaModels.ParIndexed{ExaModels.ParSource, 15}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{Int64, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, Int64}}}, Int64}}, ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 2}, Int64}}}, Int64}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{Tuple{Int64, Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 11}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 3}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 12}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 9}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 13}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 14}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 8}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(cos), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 7}, ExaModels.Node2{typeof(*), ExaModels.Node2{typeof(*), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Node1{typeof(sin), ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}}}}}, ExaModels.Compressor{NTuple{10, Int64}}, ExaModels.Compressor{NTuple{21, Int64}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 5}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 16}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64, Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, j::Int64, f_idx::Int64, t_idx::Int64, f_bus::Int64, t_bus::Int64, c1::Float64, c2::Float64, c3::Float64, c4::Float64, c5::Float64, c6::Float64, c7::Float64, c8::Float64, rate_a_sq::Float64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 2}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, ExaModels.Node2{typeof(*), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node1{typeof(abs2), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 7}, Int64}}}, Int64}}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{Int64}}}, CuArray{@NamedTuple{i::Int64, pd::Float64, gs::Float64, qd::Float64, bs::Float64, bus_type::Int64, t::Int64}, 2, CUDA.DeviceMemory}, Int64}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 3}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 4}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, rate_a::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 5}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, ExaModels.Node1{typeof(-), ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 6}, Int64}}}, Int64}}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{i::Int64, cost1::Float64, cost2::Float64, cost3::Float64, bus::Int64, t::Int64}, 2, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float32, etac::Float32, etad::Float32, Srating::Float32, Zr::Float32, Zim::Float32, Pexts::Float32, Qexts::Float32, bus::Int64, t::Int64}, 1, CUDA.DeviceMemory}}, ExaModels.SIMDFunction{Pair{ExaModels.Node2{typeof(+), ExaModels.ParIndexed{ExaModels.ParSource, 10}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, ExaModels.Var{ExaModels.Node2{typeof(+), Int64, ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(+), ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 1}, Int64}, ExaModels.Node2{typeof(*), Int64, ExaModels.Node2{typeof(-), ExaModels.ParIndexed{ExaModels.ParSource, 11}, Int64}}}, Int64}}}}, ExaModels.Compressor{Tuple{Int64}}, ExaModels.Compressor{Tuple{}}}, CuArray{@NamedTuple{c::Int64, Einit::Float32, etac::Float32, etad::Float32, Srating::Float32, Zr::Float32, Zim::Float32, Pexts::Float32, Qexts::Float32, bus::Int64, t::Int64}, 1, CUDA.DeviceMemory}}}; kwargs::@Kwargs{tol::Float64, max_wall_time::Float64, disable_garbage_collector::Bool, dual_initialized::Bool, max_iter::Float64})
   @ MadNLP ~/.julia/packages/MadNLP/Udkb5/src/IPM/solver.jl:10
 [7] solve_benchmark_cases(cases::Vector{String}, tol::Float64, hardware::String; coords::String, case_style::String, curve::Vector{Float64}, mp::Bool, storage::Bool, sc::Bool, corrective_action_ratio::Float64, include_ctg::Bool)
   @ Main ~/ExaModelsPower.jl/benchmarking/benchmark/benchmark_opf.jl:1074
 [8] top-level scope
   @ ~/ExaModelsPower.jl/benchmarking/benchmark/run_mp_gpu.jl:5
in expression starting at /home/sanjayjo/ExaModelsPower.jl/benchmarking/benchmark/run_mp_gpu.jl:4
Using device: CuDevice(0)
Found existing results at saved_raw_data/benchmark_results_mpopf_GPU_default_tol_1e4_Polar.csv
This is MadNLP version v0.8.10, running with cuDSS v0.6.0

Number of nonzeros in constraint Jacobian............:     2719
Number of nonzeros in Lagrangian Hessian.............:     3525

Total number of variables............................:      600
                     variables with only lower bounds:        0
                variables with lower and upper bounds:      525
                     variables with only upper bounds:        0
Total number of equality constraints.................:      499
Total number of inequality constraints...............:      273
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:      123
        inequality constraints with only upper bounds:      150

iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5822799e+02 1.09e+00 1.00e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  2.0752847e+02 1.09e+00 1.00e+02 8.05e+03  -1.0 1.69e+00    -  6.18e-03 2.67e-03h  1
   2  5.4112359e+02 1.07e+00 9.84e+01 7.95e+03  -1.0 1.92e+00    -  1.29e-02 1.63e-02h  1
   3  1.2811270e+03 1.04e+00 9.53e+01 7.36e+03  -1.0 1.80e+00    -  7.33e-02 3.14e-02h  1

Number of Iterations....: 3

                                   (scaled)                 (unscaled)
Objective...............:   2.4553010323481644e+02    1.2811269726586252e+03
Dual infeasibility......:   9.5255209261066909e+01    4.9702263088239494e+02
Constraint violation....:   1.0357397742677916e+00    1.0357397742677916e+00
Complementarity.........:   1.4113583915360578e+03    7.3641858153568419e+03
Overall NLP error.......:   7.3641858153568419e+03    7.3641858153568419e+03

Number of objective function evaluations             = 4
Number of objective gradient evaluations             = 4
Number of constraint evaluations                     = 4
Number of constraint Jacobian evaluations            = 4
Number of Lagrangian Hessian evaluations             = 3
Total wall-clock secs in solver (w/o fun. eval./lin. alg.)  = 83.697
Total wall-clock secs in linear solver                      =  2.528
Total wall-clock secs in NLP function evaluations           =  4.210
Total wall-clock secs                                       = 90.435

EXIT: Maximum Number of Iterations Exceeded.
MadNCL algorithm

Total number of variables............................:      600
Total number of constraints..........................:      772

outer  inner     objective    inf_pr   inf_du    η        μ       ρ 
    0      0 +1.5822799e+02 0.00e+00 0.00e+00 1.00e-01 1.0e-01 1.00e+02
iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5822799e+02 1.09e+00 5.22e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  1.4674870e+02 1.09e+00 4.99e+02 2.55e+03  -1.0 5.30e-01    -  5.83e-01 4.00e-03h  1
   2  3.0278353e+01 1.00e+00 1.54e+02 2.19e+01  -1.0 4.51e-01    -  9.85e-01 7.85e-02h  1
   3  4.0220708e+02 3.92e-01 1.15e+01 2.15e-01  -1.0 3.63e-01    -  9.92e-01 6.08e-01h  1
This is MadNLP version v0.8.10, running with cuDSS v0.6.0

Number of nonzeros in constraint Jacobian............:     2719
Number of nonzeros in Lagrangian Hessian.............:     3525

Total number of variables............................:      575
                     variables with only lower bounds:        0
                variables with lower and upper bounds:      500
                     variables with only upper bounds:        0
Total number of equality constraints.................:      499
Total number of inequality constraints...............:      273
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:      123
        inequality constraints with only upper bounds:      150

iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5987484e+02 1.09e+00 1.00e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  8.7005503e+04 3.30e-01 1.53e+02 8.05e+03  -1.0 1.80e+00    -  5.79e-03 9.17e-01h  1
   2  8.8273796e+04 3.04e-01 1.39e+02 7.62e+03  -1.0 1.07e+00    -  5.43e-02 9.02e-02h  1
   3  8.9559786e+04 2.75e-01 1.26e+02 4.45e+03  -1.0 4.36e-01    -  4.16e-01 9.40e-02h  1

Number of Iterations....: 3

                                   (scaled)                 (unscaled)
Objective...............:   1.7157047788578675e+04    8.9559785681830181e+04
Dual infeasibility......:   1.2608717009397958e+02    6.5817500015139603e+02
Constraint violation....:   2.7524584563592591e-01    2.7524584563592591e-01
Complementarity.........:   8.5184678674316251e+02    4.4466400393930153e+03
Overall NLP error.......:   4.4466400393930153e+03    4.4466400393930153e+03

Number of objective function evaluations             = 4
Number of objective gradient evaluations             = 4
Number of constraint evaluations                     = 4
Number of constraint Jacobian evaluations            = 4
Number of Lagrangian Hessian evaluations             = 3
Total wall-clock secs in solver (w/o fun. eval./lin. alg.)  = 19.423
Total wall-clock secs in linear solver                      =  0.930
Total wall-clock secs in NLP function evaluations           =  0.259
Total wall-clock secs                                       = 20.612

EXIT: Maximum Number of Iterations Exceeded.
Already have 66 cases stored.
pglib_opf_case3_lmbd
Skipping pglib_opf_case3_lmbd.m (already in results)
pglib_opf_case5_pjm
Skipping pglib_opf_case5_pjm.m (already in results)
pglib_opf_case14_ieee
Skipping pglib_opf_case14_ieee.m (already in results)
pglib_opf_case24_ieee_rts
Skipping pglib_opf_case24_ieee_rts.m (already in results)
pglib_opf_case30_as
Skipping pglib_opf_case30_as.m (already in results)
pglib_opf_case30_ieee
Skipping pglib_opf_case30_ieee.m (already in results)
pglib_opf_case39_epri
Skipping pglib_opf_case39_epri.m (already in results)
pglib_opf_case57_ieee
Skipping pglib_opf_case57_ieee.m (already in results)
pglib_opf_case60_c
Skipping pglib_opf_case60_c.m (already in results)
pglib_opf_case73_ieee_rts
Skipping pglib_opf_case73_ieee_rts.m (already in results)
pglib_opf_case89_pegase
Skipping pglib_opf_case89_pegase.m (already in results)
pglib_opf_case118_ieee
Skipping pglib_opf_case118_ieee.m (already in results)
pglib_opf_case162_ieee_dtc
Skipping pglib_opf_case162_ieee_dtc.m (already in results)
pglib_opf_case179_goc
Skipping pglib_opf_case179_goc.m (already in results)
pglib_opf_case197_snem
Skipping pglib_opf_case197_snem.m (already in results)
pglib_opf_case200_activ
Skipping pglib_opf_case200_activ.m (already in results)
pglib_opf_case240_pserc
Skipping pglib_opf_case240_pserc.m (already in results)
pglib_opf_case300_ieee
Skipping pglib_opf_case300_ieee.m (already in results)
pglib_opf_case500_goc
Skipping pglib_opf_case500_goc.m (already in results)
pglib_opf_case588_sdet
Skipping pglib_opf_case588_sdet.m (already in results)
pglib_opf_case793_goc
Skipping pglib_opf_case793_goc.m (already in results)
pglib_opf_case1354_pegase
Skipping pglib_opf_case1354_pegase.m (already in results)
pglib_opf_case1803_snem
Skipping pglib_opf_case1803_snem.m (already in results)
pglib_opf_case1888_rte
Skipping pglib_opf_case1888_rte.m (already in results)
pglib_opf_case1951_rte
Skipping pglib_opf_case1951_rte.m (already in results)
pglib_opf_case2000_goc
Skipping pglib_opf_case2000_goc.m (already in results)
pglib_opf_case2312_goc
Skipping pglib_opf_case2312_goc.m (already in results)
pglib_opf_case2383wp_k
Skipping pglib_opf_case2383wp_k.m (already in results)
pglib_opf_case2736sp_k
Skipping pglib_opf_case2736sp_k.m (already in results)
pglib_opf_case2737sop_k
Skipping pglib_opf_case2737sop_k.m (already in results)
pglib_opf_case2742_goc
Skipping pglib_opf_case2742_goc.m (already in results)
pglib_opf_case2746wop_k
Skipping pglib_opf_case2746wop_k.m (already in results)
pglib_opf_case2746wp_k
Skipping pglib_opf_case2746wp_k.m (already in results)
pglib_opf_case2848_rte
Skipping pglib_opf_case2848_rte.m (already in results)
pglib_opf_case2853_sdet
Skipping pglib_opf_case2853_sdet.m (already in results)
pglib_opf_case2868_rte
Skipping pglib_opf_case2868_rte.m (already in results)
pglib_opf_case2869_pegase
Skipping pglib_opf_case2869_pegase.m (already in results)
pglib_opf_case3012wp_k
Skipping pglib_opf_case3012wp_k.m (already in results)
pglib_opf_case3022_goc
Skipping pglib_opf_case3022_goc.m (already in results)
pglib_opf_case3120sp_k
Skipping pglib_opf_case3120sp_k.m (already in results)
pglib_opf_case3375wp_k
Skipping pglib_opf_case3375wp_k.m (already in results)
pglib_opf_case3970_goc
Skipping pglib_opf_case3970_goc.m (already in results)
pglib_opf_case4020_goc
Skipping pglib_opf_case4020_goc.m (already in results)
pglib_opf_case4601_goc
Skipping pglib_opf_case4601_goc.m (already in results)
pglib_opf_case4619_goc
Skipping pglib_opf_case4619_goc.m (already in results)
pglib_opf_case4661_sdet
Skipping pglib_opf_case4661_sdet.m (already in results)
pglib_opf_case4837_goc
Skipping pglib_opf_case4837_goc.m (already in results)
pglib_opf_case4917_goc
Skipping pglib_opf_case4917_goc.m (already in results)
pglib_opf_case5658_epigrids
Skipping pglib_opf_case5658_epigrids.m (already in results)
pglib_opf_case6468_rte
Skipping pglib_opf_case6468_rte.m (already in results)
pglib_opf_case6470_rte
Skipping pglib_opf_case6470_rte.m (already in results)
pglib_opf_case6495_rte
Skipping pglib_opf_case6495_rte.m (already in results)
pglib_opf_case6515_rte
Skipping pglib_opf_case6515_rte.m (already in results)
pglib_opf_case7336_epigrids
Skipping pglib_opf_case7336_epigrids.m (already in results)
pglib_opf_case8387_pegase
Skipping pglib_opf_case8387_pegase.m (already in results)
pglib_opf_case9241_pegase
Skipping pglib_opf_case9241_pegase.m (already in results)
pglib_opf_case9591_goc
Skipping pglib_opf_case9591_goc.m (already in results)
pglib_opf_case10000_goc
Skipping pglib_opf_case10000_goc.m (already in results)
pglib_opf_case10192_epigrids
Skipping pglib_opf_case10192_epigrids.m (already in results)
pglib_opf_case10480_goc
Skipping pglib_opf_case10480_goc.m (already in results)
pglib_opf_case13659_pegase
Skipping pglib_opf_case13659_pegase.m (already in results)
pglib_opf_case19402_goc
Skipping pglib_opf_case19402_goc.m (already in results)
pglib_opf_case20758_epigrids
Skipping pglib_opf_case20758_epigrids.m (already in results)
pglib_opf_case24464_goc
Skipping pglib_opf_case24464_goc.m (already in results)
pglib_opf_case30000_goc
Skipping pglib_opf_case30000_goc.m (already in results)
pglib_opf_case78484_epigrids
Skipping pglib_opf_case78484_epigrids.m (already in results)
Found existing results at saved_raw_data/benchmark_results_mpopf_GPU_default_tol_1e8_Polar.csv
This is MadNLP version v0.8.10, running with cuDSS v0.6.0

Number of nonzeros in constraint Jacobian............:     2719
Number of nonzeros in Lagrangian Hessian.............:     3525

Total number of variables............................:      600
                     variables with only lower bounds:        0
                variables with lower and upper bounds:      525
                     variables with only upper bounds:        0
Total number of equality constraints.................:      499
Total number of inequality constraints...............:      273
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:      123
        inequality constraints with only upper bounds:      150

iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5987484e+02 1.09e+00 1.00e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  1.5987913e+02 1.09e+00 1.11e+00 6.78e+01  -1.0 1.96e+00    -  5.29e-03 2.00e-07h  2
   2  7.6066836e+04 3.18e-01 2.10e+00 2.38e+01  -1.0 1.90e+00    -  9.69e-03 8.52e-01h  1
   3  7.8200638e+04 2.91e-01 1.90e-01 2.17e+00  -1.0 5.49e-01    -  1.29e-01 8.76e-02h  1

Number of Iterations....: 3

                                   (scaled)                 (unscaled)
Objective...............:   1.4980965678447890e+04    7.8200637545685546e+04
Dual infeasibility......:   1.9003320136112961e-01    9.9197326929779228e-01
Constraint violation....:   2.9102405296306466e-01    2.9102405296306466e-01
Complementarity.........:   4.1664690059488946e-01    2.1748967294430051e+00
Overall NLP error.......:   2.1748967294430051e+00    2.1748967294430051e+00

Number of objective function evaluations             = 5
Number of objective gradient evaluations             = 4
Number of constraint evaluations                     = 5
Number of constraint Jacobian evaluations            = 4
Number of Lagrangian Hessian evaluations             = 3
Total wall-clock secs in solver (w/o fun. eval./lin. alg.)  =  0.038
Total wall-clock secs in linear solver                      =  0.005
Total wall-clock secs in NLP function evaluations           =  0.005
Total wall-clock secs                                       =  0.048

EXIT: Maximum Number of Iterations Exceeded.
MadNCL algorithm

Total number of variables............................:      600
Total number of constraints..........................:      772

outer  inner     objective    inf_pr   inf_du    η        μ       ρ 
    0      0 +1.5987484e+02 0.00e+00 0.00e+00 1.00e-01 1.0e-01 1.00e+02
iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5987484e+02 1.09e+00 5.22e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  1.5987426e+02 1.09e+00 5.06e-02 2.57e-01  -1.0 5.28e-01    -  5.84e-01 2.00e-07h  2
    1      1 +1.5987426e+02 8.27e-08 5.04e+02 1.02e-03 1.0e-02 1.00e+02
   1  1.5987426e+02 1.09e+00 5.06e-02 2.57e-01  -2.0 4.56e-01    -  5.84e-01 2.00e-07h  2
   2  3.1044778e+01 1.00e+00 7.80e-02 1.88e-01  -2.0 4.56e-01    -  6.78e-01 8.04e-02h  1
   3  1.6712781e+02 6.45e-01 2.23e-02 1.28e-02  -2.0 3.65e-01    -  9.72e-01 3.57e-01h  1
    2      3 +2.3294952e+00 1.45e-01 4.06e+01 1.02e-03 1.0e-02 1.00e+03
   3  1.6503109e+03 6.45e-01 7.17e-02 1.28e-02  -2.0 4.51e-01    -  9.72e-01 3.57e-01h  1
    3      3 +2.3294952e+00 1.45e-01 1.31e+02 1.02e-03 1.0e-02 1.00e+04
   3  1.6482142e+04 6.45e-01 7.89e-01 1.28e-02  -2.0 4.10e+00    -  9.72e-01 3.57e-01h  1
    4      3 +2.3294952e+00 1.45e-01 1.44e+03 1.02e-03 1.0e-02 1.00e+05
   3  1.6480045e+05 6.45e-01 7.96e+00 1.28e-02  -2.0 3.63e+01    -  9.72e-01 3.57e-01h  1
This is MadNLP version v0.8.10, running with cuDSS v0.6.0

Number of nonzeros in constraint Jacobian............:     2719
Number of nonzeros in Lagrangian Hessian.............:     3525

Total number of variables............................:      575
                     variables with only lower bounds:        0
                variables with lower and upper bounds:      500
                     variables with only upper bounds:        0
Total number of equality constraints.................:      499
Total number of inequality constraints...............:      273
        inequality constraints with only lower bounds:        0
   inequality constraints with lower and upper bounds:      123
        inequality constraints with only upper bounds:      150

iter    objective    inf_pr   inf_du inf_compl lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0  1.5987484e+02 1.09e+00 1.00e+02 8.10e+03  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
   1  8.7005503e+04 3.30e-01 1.53e+02 8.05e+03  -1.0 1.80e+00    -  5.79e-03 9.17e-01h  1
   2  8.8273796e+04 3.04e-01 1.39e+02 7.62e+03  -1.0 1.07e+00    -  5.43e-02 9.02e-02h  1
   3  8.9559786e+04 2.75e-01 1.26e+02 4.45e+03  -1.0 4.36e-01    -  4.16e-01 9.40e-02h  1

Number of Iterations....: 3

                                   (scaled)                 (unscaled)
Objective...............:   1.7157047788578690e+04    8.9559785681830253e+04
Dual infeasibility......:   1.2608717009397890e+02    6.5817500015139251e+02
Constraint violation....:   2.7524584563592058e-01    2.7524584563592058e-01
Complementarity.........:   8.5184678674311931e+02    4.4466400393927897e+03
Overall NLP error.......:   4.4466400393927897e+03    4.4466400393927897e+03

Number of objective function evaluations             = 4
Number of objective gradient evaluations             = 4
Number of constraint evaluations                     = 4
Number of constraint Jacobian evaluations            = 4
Number of Lagrangian Hessian evaluations             = 3
Total wall-clock secs in solver (w/o fun. eval./lin. alg.)  =  0.040
Total wall-clock secs in linear solver                      =  0.015
Total wall-clock secs in NLP function evaluations           =  0.007
Total wall-clock secs                                       =  0.062

EXIT: Maximum Number of Iterations Exceeded.
Already have 61 cases stored.
pglib_opf_case3_lmbd
Skipping pglib_opf_case3_lmbd.m (already in results)
pglib_opf_case5_pjm
Skipping pglib_opf_case5_pjm.m (already in results)
pglib_opf_case14_ieee
Skipping pglib_opf_case14_ieee.m (already in results)
pglib_opf_case24_ieee_rts
Skipping pglib_opf_case24_ieee_rts.m (already in results)
pglib_opf_case30_as
Skipping pglib_opf_case30_as.m (already in results)
pglib_opf_case30_ieee
Skipping pglib_opf_case30_ieee.m (already in results)
pglib_opf_case39_epri
Skipping pglib_opf_case39_epri.m (already in results)
pglib_opf_case57_ieee
Skipping pglib_opf_case57_ieee.m (already in results)
pglib_opf_case60_c
Skipping pglib_opf_case60_c.m (already in results)
pglib_opf_case73_ieee_rts
Skipping pglib_opf_case73_ieee_rts.m (already in results)
pglib_opf_case89_pegase
Skipping pglib_opf_case89_pegase.m (already in results)
pglib_opf_case118_ieee
Skipping pglib_opf_case118_ieee.m (already in results)
pglib_opf_case162_ieee_dtc
Skipping pglib_opf_case162_ieee_dtc.m (already in results)
pglib_opf_case179_goc
Skipping pglib_opf_case179_goc.m (already in results)
pglib_opf_case197_snem
Skipping pglib_opf_case197_snem.m (already in results)
pglib_opf_case200_activ
Skipping pglib_opf_case200_activ.m (already in results)
pglib_opf_case240_pserc
Skipping pglib_opf_case240_pserc.m (already in results)
pglib_opf_case300_ieee
Skipping pglib_opf_case300_ieee.m (already in results)
pglib_opf_case500_goc
Skipping pglib_opf_case500_goc.m (already in results)
pglib_opf_case588_sdet
Skipping pglib_opf_case588_sdet.m (already in results)
pglib_opf_case793_goc
Skipping pglib_opf_case793_goc.m (already in results)
pglib_opf_case1354_pegase
Skipping pglib_opf_case1354_pegase.m (already in results)
pglib_opf_case1803_snem
Skipping pglib_opf_case1803_snem.m (already in results)
pglib_opf_case1888_rte
Skipping pglib_opf_case1888_rte.m (already in results)
pglib_opf_case1951_rte
Skipping pglib_opf_case1951_rte.m (already in results)
pglib_opf_case2000_goc
Skipping pglib_opf_case2000_goc.m (already in results)
pglib_opf_case2312_goc
Skipping pglib_opf_case2312_goc.m (already in results)
pglib_opf_case2383wp_k
Skipping pglib_opf_case2383wp_k.m (already in results)
pglib_opf_case2736sp_k
Skipping pglib_opf_case2736sp_k.m (already in results)
pglib_opf_case2737sop_k
Skipping pglib_opf_case2737sop_k.m (already in results)
pglib_opf_case2742_goc
Skipping pglib_opf_case2742_goc.m (already in results)
pglib_opf_case2746wop_k
Skipping pglib_opf_case2746wop_k.m (already in results)
pglib_opf_case2746wp_k
Skipping pglib_opf_case2746wp_k.m (already in results)
pglib_opf_case2848_rte
Skipping pglib_opf_case2848_rte.m (already in results)
pglib_opf_case2853_sdet
Skipping pglib_opf_case2853_sdet.m (already in results)
pglib_opf_case2868_rte
Skipping pglib_opf_case2868_rte.m (already in results)
pglib_opf_case2869_pegase
Skipping pglib_opf_case2869_pegase.m (already in results)
pglib_opf_case3012wp_k
Skipping pglib_opf_case3012wp_k.m (already in results)
pglib_opf_case3022_goc
Skipping pglib_opf_case3022_goc.m (already in results)
pglib_opf_case3120sp_k
Skipping pglib_opf_case3120sp_k.m (already in results)
pglib_opf_case3375wp_k
Skipping pglib_opf_case3375wp_k.m (already in results)
pglib_opf_case3970_goc
Skipping pglib_opf_case3970_goc.m (already in results)
pglib_opf_case4020_goc
Skipping pglib_opf_case4020_goc.m (already in results)
pglib_opf_case4601_goc
Skipping pglib_opf_case4601_goc.m (already in results)
pglib_opf_case4619_goc
Skipping pglib_opf_case4619_goc.m (already in results)
pglib_opf_case4661_sdet
Skipping pglib_opf_case4661_sdet.m (already in results)
pglib_opf_case4837_goc
Skipping pglib_opf_case4837_goc.m (already in results)
pglib_opf_case4917_goc
Skipping pglib_opf_case4917_goc.m (already in results)
pglib_opf_case5658_epigrids
Skipping pglib_opf_case5658_epigrids.m (already in results)
pglib_opf_case6468_rte
Skipping pglib_opf_case6468_rte.m (already in results)
pglib_opf_case6470_rte
Skipping pglib_opf_case6470_rte.m (already in results)
pglib_opf_case6495_rte
Skipping pglib_opf_case6495_rte.m (already in results)
pglib_opf_case6515_rte
Skipping pglib_opf_case6515_rte.m (already in results)
pglib_opf_case7336_epigrids
Skipping pglib_opf_case7336_epigrids.m (already in results)
pglib_opf_case8387_pegase
Skipping pglib_opf_case8387_pegase.m (already in results)
pglib_opf_case9241_pegase
Skipping pglib_opf_case9241_pegase.m (already in results)
pglib_opf_case9591_goc
Skipping pglib_opf_case9591_goc.m (already in results)
pglib_opf_case10000_goc
Skipping pglib_opf_case10000_goc.m (already in results)
pglib_opf_case10192_epigrids
Skipping pglib_opf_case10192_epigrids.m (already in results)
pglib_opf_case10480_goc
Skipping pglib_opf_case10480_goc.m (already in results)
pglib_opf_case13659_pegase
Skipping pglib_opf_case13659_pegase.m (already in results)
pglib_opf_case19402_goc
